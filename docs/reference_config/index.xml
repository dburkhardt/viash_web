<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference: Config on</title><link>https://viash.io/docs/reference_config/</link><description>Recent content in Reference: Config on</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><lastBuildDate>Fri, 28 May 2021 14:00:00 +0000</lastBuildDate><atom:link href="https://viash.io/docs/reference_config/index.xml" rel="self" type="application/rss+xml"/><item><title>Nextflow Platform</title><link>https://viash.io/docs/reference_config/platform-nextflow/</link><pubDate>Fri, 28 May 2021 14:00:00 +0000</pubDate><guid>https://viash.io/docs/reference_config/platform-nextflow/</guid><description/></item><item><title>Config file</title><link>https://viash.io/docs/reference_config/config/</link><pubDate>Fri, 28 May 2021 14:00:00 +0000</pubDate><guid>https://viash.io/docs/reference_config/config/</guid><description>The viash config file A viash config file describes the behaviour of a script and the platform it runs on. It consists of two main sections: functionality and platforms.
The functionality section describes the core functionality of the component, such as its inputs, outputs, arguments, and extra resources. For each of the arguments, specifying a description and a set of argument restrictions help create a useful command-line interface. To ensure that your component works as expected, writing one or more tests is essential.</description></item><item><title>Functionality</title><link>https://viash.io/docs/reference_config/functionality/</link><pubDate>Fri, 28 May 2021 14:00:00 +0000</pubDate><guid>https://viash.io/docs/reference_config/functionality/</guid><description>By specifying a few restrictions (e.g. mandatory arguments) and adding some descriptions, viash will automatically generate a stylish command-line interface for you.
Example An example of such a functionality yaml can be found below, each part of which is explained in more depth in the following sections.
functionality: name: exe version: &amp;quot;1.0.0&amp;quot; description: | This component performs function Y and Z. It is possible to make this a multiline string. arguments: - name: --input type: file direction: input alternatives: [-i] description: Input file(s) default: input.</description></item><item><title>Native Platform</title><link>https://viash.io/docs/reference_config/platform-native/</link><pubDate>Fri, 28 May 2021 14:00:00 +0000</pubDate><guid>https://viash.io/docs/reference_config/platform-native/</guid><description>Any dependencies are assumed to have been installed by the user, so the native platform is meant for developers (who know what they’re doing) or for simple bash scripts (which have no extra dependencies).
Example An example of a native platform yaml can be found below, each part of which is explained in more depth in the following sections.
platforms: - type: native id: native_platform version: &amp;quot;1.0.0&amp;quot; id [string] As with all platforms, you can give a platform a different name.</description></item><item><title>Docker Platform</title><link>https://viash.io/docs/reference_config/platform-docker/</link><pubDate>Fri, 28 May 2021 14:00:00 +0000</pubDate><guid>https://viash.io/docs/reference_config/platform-docker/</guid><description>By specifying which dependencies your component needs, users will be able to build a docker container from scratch using the setup flag, or pull it from a docker repository.
Example An example of a docker platform yaml can be found below, each part of which is explained in more depth in the following sections.
- type: docker id: custom_platform_name image: bash:4.0 version: &amp;quot;0.1.0&amp;quot; target_image: myorganisation/example_docker chown: true port: [80, 8080] workdir: /app setup: - type: docker build_args: - GITHUB_PAT=&amp;quot;$GITHUB_PAT&amp;quot; - type: apt packages: - imagemagick - type: r cran: - tidyverse - dynutils - type: docker run: - &amp;quot;git clone https://github.</description></item><item><title>Regarding file formats</title><link>https://viash.io/docs/reference_config/file_formats/</link><pubDate>Fri, 28 May 2021 14:00:00 +0000</pubDate><guid>https://viash.io/docs/reference_config/file_formats/</guid><description>The following two file formats are equivalent.
Config format Metadata config.vsh.yaml:
functionality: name: hello arguments: - name: &amp;quot;name&amp;quot; type: string default: Bob resources: - type: bash_script path: script.sh platforms: - type: native Script script.sh:
#!/bin/bash echo Hello $par_name Script format Script script.vsh.sh:
#!/bin/bash #' functionality: #' name: hello #' arguments: #' - name: &amp;quot;name&amp;quot; #' type: string #' default: Bob #' platforms: #' - type: native echo Hello $par_name</description></item><item><title>Dynamic Config Modding</title><link>https://viash.io/docs/reference_config/config_mods/</link><pubDate>Fri, 28 May 2021 14:00:00 +0000</pubDate><guid>https://viash.io/docs/reference_config/config_mods/</guid><description>Since version 0.4.0, viash supports modifying a viash config YAML at runtime using a custom DSL. This allows making dynamic changes to your components or projects. All viash subcommands have support for the DSL through the -c|--config_mod parameter.
The easiest way to explain is perhaps by showing some examples. The following statements are all valid under the DSL definition.
Changing the version of a component:
.functionality.version := &amp;quot;0.3.0&amp;quot; Changing the registry of docker containers.</description></item></channel></rss>